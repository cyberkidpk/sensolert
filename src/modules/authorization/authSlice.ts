import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
//, AppThunk
import { fetchAuthStatus } from './authAPI';

export interface AuthState {
    username: string;
    password: string;
    status?: 'idle' | 'loading' | 'fulfilled' | 'failed';
}

const initialState: AuthState = {
    username: '',
    password: '',
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const authMessageAsync = createAsyncThunk(
    'auth/fetchAuthStatus',
    async (message: {}) => {
        const response = await fetchAuthStatus(message);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    },
);

export const authSlice = createSlice({
    name: 'authStatus',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(authMessageAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(
                authMessageAsync.fulfilled,
                (state, action: PayloadAction<{}>) => {
                    state.status = 'fulfilled';
                    state = { ...state, ...action.payload };
                },
            )
            .addCase(authMessageAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const authMessageStatus = (state: RootState) => state.authStatus.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//     (dispatch, getState) => {
//         const currentValue = selectCount(getState());
//         if (currentValue % 2 === 1) {
//             dispatch(incrementByAmount(amount));
//         }
//     };

export default authSlice.reducer;
